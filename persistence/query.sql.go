// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: query.sql

package persistence

import (
	"context"
)

const createRoute = `-- name: CreateRoute :one
INSERT INTO
  routes (path, service_id)
VALUES
  ($1, $2) RETURNING id, path, service_id
`

type CreateRouteParams struct {
	Path      string
	ServiceID int64
}

func (q *Queries) CreateRoute(ctx context.Context, arg CreateRouteParams) (Route, error) {
	row := q.db.QueryRowContext(ctx, createRoute, arg.Path, arg.ServiceID)
	var i Route
	err := row.Scan(&i.ID, &i.Path, &i.ServiceID)
	return i, err
}

const createService = `-- name: CreateService :one
INSERT INTO
  services (backend)
VALUES
  ($1) RETURNING id, backend
`

func (q *Queries) CreateService(ctx context.Context, backend string) (Service, error) {
	row := q.db.QueryRowContext(ctx, createService, backend)
	var i Service
	err := row.Scan(&i.ID, &i.Backend)
	return i, err
}

const deleteRoute = `-- name: DeleteRoute :exec
DELETE FROM
  routes
WHERE
  id = $1
`

func (q *Queries) DeleteRoute(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteRoute, id)
	return err
}

const deleteService = `-- name: DeleteService :exec
DELETE FROM
  services
WHERE
  id = $1
`

func (q *Queries) DeleteService(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteService, id)
	return err
}

const getRoute = `-- name: GetRoute :one
SELECT
  id, path, service_id
FROM
  routes
WHERE
  id = $1
`

func (q *Queries) GetRoute(ctx context.Context, id int64) (Route, error) {
	row := q.db.QueryRowContext(ctx, getRoute, id)
	var i Route
	err := row.Scan(&i.ID, &i.Path, &i.ServiceID)
	return i, err
}

const getService = `-- name: GetService :one
SELECT
  id, backend
FROM
  services
WHERE
  id = $1
`

func (q *Queries) GetService(ctx context.Context, id int64) (Service, error) {
	row := q.db.QueryRowContext(ctx, getService, id)
	var i Service
	err := row.Scan(&i.ID, &i.Backend)
	return i, err
}

const listRoutes = `-- name: ListRoutes :many
SELECT
  id, path, service_id
FROM
  routes
`

func (q *Queries) ListRoutes(ctx context.Context) ([]Route, error) {
	rows, err := q.db.QueryContext(ctx, listRoutes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Route
	for rows.Next() {
		var i Route
		if err := rows.Scan(&i.ID, &i.Path, &i.ServiceID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRoutesForService = `-- name: ListRoutesForService :many
SELECT
  id, path, service_id
FROM
  routes
WHERE
  service_id = $1
`

func (q *Queries) ListRoutesForService(ctx context.Context, serviceID int64) ([]Route, error) {
	rows, err := q.db.QueryContext(ctx, listRoutesForService, serviceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Route
	for rows.Next() {
		var i Route
		if err := rows.Scan(&i.ID, &i.Path, &i.ServiceID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listServices = `-- name: ListServices :many
SELECT
  id, backend
FROM
  services
`

func (q *Queries) ListServices(ctx context.Context) ([]Service, error) {
	rows, err := q.db.QueryContext(ctx, listServices)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Service
	for rows.Next() {
		var i Service
		if err := rows.Scan(&i.ID, &i.Backend); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listServicesByIDs = `-- name: ListServicesByIDs :many
SELECT
  id, backend
FROM
  services
WHERE
  id IN ($1)
`

func (q *Queries) ListServicesByIDs(ctx context.Context, id int64) ([]Service, error) {
	rows, err := q.db.QueryContext(ctx, listServicesByIDs, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Service
	for rows.Next() {
		var i Service
		if err := rows.Scan(&i.ID, &i.Backend); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRoute = `-- name: UpdateRoute :one
UPDATE
  routes
SET
  path = $1,
  service_id = $2
WHERE
  id = $3 RETURNING id, path, service_id
`

type UpdateRouteParams struct {
	Path      string
	ServiceID int64
	ID        int64
}

func (q *Queries) UpdateRoute(ctx context.Context, arg UpdateRouteParams) (Route, error) {
	row := q.db.QueryRowContext(ctx, updateRoute, arg.Path, arg.ServiceID, arg.ID)
	var i Route
	err := row.Scan(&i.ID, &i.Path, &i.ServiceID)
	return i, err
}

const updateService = `-- name: UpdateService :one
UPDATE
  services
SET
  backend = $1
WHERE
  id = $2 RETURNING id, backend
`

type UpdateServiceParams struct {
	Backend string
	ID      int64
}

func (q *Queries) UpdateService(ctx context.Context, arg UpdateServiceParams) (Service, error) {
	row := q.db.QueryRowContext(ctx, updateService, arg.Backend, arg.ID)
	var i Service
	err := row.Scan(&i.ID, &i.Backend)
	return i, err
}
